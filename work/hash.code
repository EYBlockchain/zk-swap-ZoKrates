import "hashes/sha256/512bit.code" as sha256 
import "utils/pack/pack128.code" as pack128

//returns 256 bits of padding for a 256-bit message (because we're using sha512, and we need to make our own custom padding).
def padding() -> (field[256]):
  field[256] padBits = [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0]

  return padBits

// x1 = 1
def main(field a) -> (field, field): //(field[256]):
  field[256] X1 = [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	a]
  field[256] X2 = padding()
  field[256] Y256 = sha256(X1, X2)


  field[128] Y0to127 = [Y256[0],	Y256[1],	Y256[2],	Y256[3],	Y256[4],	Y256[5],	Y256[6],	Y256[7],	Y256[8],	Y256[9],	Y256[10],	Y256[11],	Y256[12],	Y256[13],	Y256[14],	Y256[15],	Y256[16],	Y256[17],	Y256[18],	Y256[19],	Y256[20],	Y256[21],	Y256[22],	Y256[23],	Y256[24],	Y256[25],	Y256[26],	Y256[27],	Y256[28],	Y256[29],	Y256[30],	Y256[31],	Y256[32],	Y256[33],	Y256[34],	Y256[35],	Y256[36],	Y256[37],	Y256[38],	Y256[39],	Y256[40],	Y256[41],	Y256[42],	Y256[43],	Y256[44],	Y256[45],	Y256[46],	Y256[47],	Y256[48],	Y256[49],	Y256[50],	Y256[51],	Y256[52],	Y256[53],	Y256[54],	Y256[55],	Y256[56],	Y256[57],	Y256[58],	Y256[59],	Y256[60],	Y256[61],	Y256[62],	Y256[63],	Y256[64],	Y256[65],	Y256[66],	Y256[67],	Y256[68],	Y256[69],	Y256[70],	Y256[71],	Y256[72],	Y256[73],	Y256[74],	Y256[75],	Y256[76],	Y256[77],	Y256[78],	Y256[79],	Y256[80],	Y256[81],	Y256[82],	Y256[83],	Y256[84],	Y256[85],	Y256[86],	Y256[87],	Y256[88],	Y256[89],	Y256[90],	Y256[91],	Y256[92],	Y256[93],	Y256[94],	Y256[95],	Y256[96],	Y256[97],	Y256[98],	Y256[99],	Y256[100],	Y256[101],	Y256[102],	Y256[103],	Y256[104],	Y256[105],	Y256[106],	Y256[107],	Y256[108],	Y256[109],	Y256[110],	Y256[111],	Y256[112],	Y256[113],	Y256[114],	Y256[115],	Y256[116],	Y256[117],	Y256[118],	Y256[119],	Y256[120],	Y256[121],	Y256[122],	Y256[123],	Y256[124],	Y256[125],	Y256[126],	Y256[127]]
  
  field Y1 = pack128(Y0to127)
  

  field[128] Y128to255 = [Y256[128],	Y256[129],	Y256[130],	Y256[131],	Y256[132],	Y256[133],	Y256[134],	Y256[135],	Y256[136],	Y256[137],	Y256[138],	Y256[139],	Y256[140],	Y256[141],	Y256[142],	Y256[143],	Y256[144],	Y256[145],	Y256[146],	Y256[147],	Y256[148],	Y256[149],	Y256[150],	Y256[151],	Y256[152],	Y256[153],	Y256[154],	Y256[155],	Y256[156],	Y256[157],	Y256[158],	Y256[159],	Y256[160],	Y256[161],	Y256[162],	Y256[163],	Y256[164],	Y256[165],	Y256[166],	Y256[167],	Y256[168],	Y256[169],	Y256[170],	Y256[171],	Y256[172],	Y256[173],	Y256[174],	Y256[175],	Y256[176],	Y256[177],	Y256[178],	Y256[179],	Y256[180],	Y256[181],	Y256[182],	Y256[183],	Y256[184],	Y256[185],	Y256[186],	Y256[187],	Y256[188],	Y256[189],	Y256[190],	Y256[191],	Y256[192],	Y256[193],	Y256[194],	Y256[195],	Y256[196],	Y256[197],	Y256[198],	Y256[199],	Y256[200],	Y256[201],	Y256[202],	Y256[203],	Y256[204],	Y256[205],	Y256[206],	Y256[207],	Y256[208],	Y256[209],	Y256[210],	Y256[211],	Y256[212],	Y256[213],	Y256[214],	Y256[215],	Y256[216],	Y256[217],	Y256[218],	Y256[219],	Y256[220],	Y256[221],	Y256[222],	Y256[223],	Y256[224],	Y256[225],	Y256[226],	Y256[227],	Y256[228],	Y256[229],	Y256[230],	Y256[231],	Y256[232],	Y256[233],	Y256[234],	Y256[235],	Y256[236],	Y256[237],	Y256[238],	Y256[239],	Y256[240],	Y256[241],	Y256[242],	Y256[243],	Y256[244],	Y256[245],	Y256[246],	Y256[247],	Y256[248],	Y256[249],	Y256[250],	Y256[251],	Y256[252],	Y256[253],	Y256[254],	Y256[255]]

  field Y2 = pack128(Y128to255)


  return Y1, Y2



  // for input x=1:
  // this input is 256 bits: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
  // and the padding is 256 bits: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000

  // binary output (Y256) = 1110110001001001000101101101110100101000111111000100110000010000110101111000111000101000011111001010010111011001110011000101000111101110000110101110011100111100101111111101111000001000110001101011001101110011001001001100101111111010101011001000101111000101 (note: we get this value after pasting outputs 255...0 (little_end...big_end), removing whitespace, and reversing the string (so we get big_end...little_end))

  // hex output: EC4916DD28FC4C10D78E287CA5D9CC51EE1AE73CBFDE08C6B37324CBFAAC8BC5

  // this matches the hash of 0000000000000000000000000000000000000000000000000000000000000001  in the online calculator (this is a hex representation of 1, as 256bits = 64 hex values)

  // If we look at decimal output (splitting the binary string into 2 parts of 128-bits each, we get):
  // ~out_1 316495952764820137513325325447450102725 <-- little end
  // ~out_0 314077308411032793321278816725012958289 <-- big end


  // return Y256